generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Publisher {
  id            String   @id @default(cuid())
  walletAddress String   @unique @map("wallet_address")
  websiteDomain String?  @map("website_domain")
  email         String?
  name          String?
  verified      Boolean  @default(false)
  settings      Json?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  adSlots    AdSlot[]
  placements AdPlacement[]
  payments   Payment[]

  @@map("publishers")
}

model AdSlot {
  id                String   @id @default(cuid())
  publisherId       String   @map("publisher_id")
  slotIdentifier    String   @map("slot_identifier")
  size              String
  width             Int
  height            Int
  basePrice         Decimal  @map("base_price") @db.Decimal(10, 6)
  currency          String   @default("USDC")
  network           String   @default("base")
  durationOptions   String[] @map("duration_options")
  category          String?
  moderationLevel   String   @default("medium") @map("moderation_level")
  active            Boolean  @default(true)
  websiteUrl        String   @map("website_url")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  publisher  Publisher     @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  placements AdPlacement[]

  @@unique([publisherId, slotIdentifier])
  @@map("ad_slots")
}

model AdPlacement {
  id                String   @id @default(cuid())
  slotId            String   @map("slot_id")
  publisherId       String   @map("publisher_id")
  advertiserWallet  String   @map("advertiser_wallet")
  contentType       String   @map("content_type")
  contentUrl        String?  @map("content_url")
  clickUrl          String?  @map("click_url")
  description       String?
  price             Decimal  @db.Decimal(10, 6)
  currency          String   @default("USDC")
  durationMinutes   Int      @map("duration_minutes")
  startsAt          DateTime @map("starts_at")
  expiresAt         DateTime @map("expires_at")
  status            String   @default("pending")
  moderationStatus  String   @default("pending") @map("moderation_status")
  moderationNotes   String?  @map("moderation_notes")
  viewCount         Int      @default(0) @map("view_count")
  clickCount        Int      @default(0) @map("click_count")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  slot      AdSlot      @relation(fields: [slotId], references: [id], onDelete: Cascade)
  publisher Publisher   @relation(fields: [publisherId], references: [id])
  payment   Payment?
  content   AdContent[]

  @@map("ad_placements")
}

model AdContent {
  id          String @id @default(cuid())
  placementId String @map("placement_id")
  type        String
  fileName    String @map("file_name")
  filePath    String @map("file_path")
  fileSize    Int    @map("file_size")
  mimeType    String @map("mime_type")
  width       Int?
  height      Int?
  duration    Int?
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  placement AdPlacement @relation(fields: [placementId], references: [id], onDelete: Cascade)

  @@map("ad_content")
}

model Payment {
  id              String   @id @default(cuid())
  placementId     String   @unique @map("placement_id")
  publisherId     String   @map("publisher_id")
  transactionHash String   @map("transaction_hash")
  blockNumber     Int?     @map("block_number")
  amount          Decimal  @db.Decimal(10, 6)
  currency        String   @default("USDC")
  network         String   @default("base")
  platformFee     Decimal  @db.Decimal(10, 6) @map("platform_fee")
  publisherRevenue Decimal @db.Decimal(10, 6) @map("publisher_revenue")
  status          String   @default("pending")
  verifiedAt      DateTime? @map("verified_at")
  createdAt       DateTime @default(now()) @map("created_at")

  placement AdPlacement @relation(fields: [placementId], references: [id])
  publisher Publisher   @relation(fields: [publisherId], references: [id])

  @@map("payments")
}

model Analytics {
  id          String   @id @default(cuid())
  placementId String   @map("placement_id")
  eventType   String   @map("event_type")
  timestamp   DateTime @default(now())
  userAgent   String?  @map("user_agent")
  ipAddress   String?  @map("ip_address")
  country     String?
  referrer    String?
  metadata    Json?

  @@map("analytics")
}

